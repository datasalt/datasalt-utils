/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.datasalt.utils.thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestEntity implements org.apache.thrift.TBase<TestEntity, TestEntity._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TestEntity");

  private static final org.apache.thrift.protocol.TField STR1_FIELD_DESC = new org.apache.thrift.protocol.TField("str1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STR2_FIELD_DESC = new org.apache.thrift.protocol.TField("str2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STR3_FIELD_DESC = new org.apache.thrift.protocol.TField("str3", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LONG_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("longNumber", org.apache.thrift.protocol.TType.I64, (short)20);

  private String str1; // required
  private String str2; // required
  private String str3; // required
  private int number; // required
  private long longNumber; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STR1((short)1, "str1"),
    STR2((short)2, "str2"),
    STR3((short)3, "str3"),
    NUMBER((short)10, "number"),
    LONG_NUMBER((short)20, "longNumber");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STR1
          return STR1;
        case 2: // STR2
          return STR2;
        case 3: // STR3
          return STR3;
        case 10: // NUMBER
          return NUMBER;
        case 20: // LONG_NUMBER
          return LONG_NUMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER_ISSET_ID = 0;
  private static final int __LONGNUMBER_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STR1, new org.apache.thrift.meta_data.FieldMetaData("str1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR2, new org.apache.thrift.meta_data.FieldMetaData("str2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR3, new org.apache.thrift.meta_data.FieldMetaData("str3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LONG_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("longNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TestEntity.class, metaDataMap);
  }

  public TestEntity() {
  }

  public TestEntity(
    String str1,
    String str2,
    String str3,
    int number,
    long longNumber)
  {
    this();
    this.str1 = str1;
    this.str2 = str2;
    this.str3 = str3;
    this.number = number;
    setNumberIsSet(true);
    this.longNumber = longNumber;
    setLongNumberIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestEntity(TestEntity other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetStr1()) {
      this.str1 = other.str1;
    }
    if (other.isSetStr2()) {
      this.str2 = other.str2;
    }
    if (other.isSetStr3()) {
      this.str3 = other.str3;
    }
    this.number = other.number;
    this.longNumber = other.longNumber;
  }

  public TestEntity deepCopy() {
    return new TestEntity(this);
  }

  @Override
  public void clear() {
    this.str1 = null;
    this.str2 = null;
    this.str3 = null;
    setNumberIsSet(false);
    this.number = 0;
    setLongNumberIsSet(false);
    this.longNumber = 0;
  }

  public String getStr1() {
    return this.str1;
  }

  public void setStr1(String str1) {
    this.str1 = str1;
  }

  public void unsetStr1() {
    this.str1 = null;
  }

  /** Returns true if field str1 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr1() {
    return this.str1 != null;
  }

  public void setStr1IsSet(boolean value) {
    if (!value) {
      this.str1 = null;
    }
  }

  public String getStr2() {
    return this.str2;
  }

  public void setStr2(String str2) {
    this.str2 = str2;
  }

  public void unsetStr2() {
    this.str2 = null;
  }

  /** Returns true if field str2 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr2() {
    return this.str2 != null;
  }

  public void setStr2IsSet(boolean value) {
    if (!value) {
      this.str2 = null;
    }
  }

  public String getStr3() {
    return this.str3;
  }

  public void setStr3(String str3) {
    this.str3 = str3;
  }

  public void unsetStr3() {
    this.str3 = null;
  }

  /** Returns true if field str3 is set (has been assigned a value) and false otherwise */
  public boolean isSetStr3() {
    return this.str3 != null;
  }

  public void setStr3IsSet(boolean value) {
    if (!value) {
      this.str3 = null;
    }
  }

  public int getNumber() {
    return this.number;
  }

  public void setNumber(int number) {
    this.number = number;
    setNumberIsSet(true);
  }

  public void unsetNumber() {
    __isset_bit_vector.clear(__NUMBER_ISSET_ID);
  }

  /** Returns true if field number is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber() {
    return __isset_bit_vector.get(__NUMBER_ISSET_ID);
  }

  public void setNumberIsSet(boolean value) {
    __isset_bit_vector.set(__NUMBER_ISSET_ID, value);
  }

  public long getLongNumber() {
    return this.longNumber;
  }

  public void setLongNumber(long longNumber) {
    this.longNumber = longNumber;
    setLongNumberIsSet(true);
  }

  public void unsetLongNumber() {
    __isset_bit_vector.clear(__LONGNUMBER_ISSET_ID);
  }

  /** Returns true if field longNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetLongNumber() {
    return __isset_bit_vector.get(__LONGNUMBER_ISSET_ID);
  }

  public void setLongNumberIsSet(boolean value) {
    __isset_bit_vector.set(__LONGNUMBER_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STR1:
      if (value == null) {
        unsetStr1();
      } else {
        setStr1((String)value);
      }
      break;

    case STR2:
      if (value == null) {
        unsetStr2();
      } else {
        setStr2((String)value);
      }
      break;

    case STR3:
      if (value == null) {
        unsetStr3();
      } else {
        setStr3((String)value);
      }
      break;

    case NUMBER:
      if (value == null) {
        unsetNumber();
      } else {
        setNumber((Integer)value);
      }
      break;

    case LONG_NUMBER:
      if (value == null) {
        unsetLongNumber();
      } else {
        setLongNumber((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STR1:
      return getStr1();

    case STR2:
      return getStr2();

    case STR3:
      return getStr3();

    case NUMBER:
      return Integer.valueOf(getNumber());

    case LONG_NUMBER:
      return Long.valueOf(getLongNumber());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STR1:
      return isSetStr1();
    case STR2:
      return isSetStr2();
    case STR3:
      return isSetStr3();
    case NUMBER:
      return isSetNumber();
    case LONG_NUMBER:
      return isSetLongNumber();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TestEntity)
      return this.equals((TestEntity)that);
    return false;
  }

  public boolean equals(TestEntity that) {
    if (that == null)
      return false;

    boolean this_present_str1 = true && this.isSetStr1();
    boolean that_present_str1 = true && that.isSetStr1();
    if (this_present_str1 || that_present_str1) {
      if (!(this_present_str1 && that_present_str1))
        return false;
      if (!this.str1.equals(that.str1))
        return false;
    }

    boolean this_present_str2 = true && this.isSetStr2();
    boolean that_present_str2 = true && that.isSetStr2();
    if (this_present_str2 || that_present_str2) {
      if (!(this_present_str2 && that_present_str2))
        return false;
      if (!this.str2.equals(that.str2))
        return false;
    }

    boolean this_present_str3 = true && this.isSetStr3();
    boolean that_present_str3 = true && that.isSetStr3();
    if (this_present_str3 || that_present_str3) {
      if (!(this_present_str3 && that_present_str3))
        return false;
      if (!this.str3.equals(that.str3))
        return false;
    }

    boolean this_present_number = true;
    boolean that_present_number = true;
    if (this_present_number || that_present_number) {
      if (!(this_present_number && that_present_number))
        return false;
      if (this.number != that.number)
        return false;
    }

    boolean this_present_longNumber = true;
    boolean that_present_longNumber = true;
    if (this_present_longNumber || that_present_longNumber) {
      if (!(this_present_longNumber && that_present_longNumber))
        return false;
      if (this.longNumber != that.longNumber)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TestEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TestEntity typedOther = (TestEntity)other;

    lastComparison = Boolean.valueOf(isSetStr1()).compareTo(typedOther.isSetStr1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str1, typedOther.str1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStr2()).compareTo(typedOther.isSetStr2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str2, typedOther.str2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStr3()).compareTo(typedOther.isSetStr3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str3, typedOther.str3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNumber()).compareTo(typedOther.isSetNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number, typedOther.number);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongNumber()).compareTo(typedOther.isSetLongNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longNumber, typedOther.longNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // STR1
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.str1 = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STR2
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.str2 = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // STR3
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.str3 = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // NUMBER
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.number = iprot.readI32();
            setNumberIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // LONG_NUMBER
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.longNumber = iprot.readI64();
            setLongNumberIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.str1 != null) {
      oprot.writeFieldBegin(STR1_FIELD_DESC);
      oprot.writeString(this.str1);
      oprot.writeFieldEnd();
    }
    if (this.str2 != null) {
      oprot.writeFieldBegin(STR2_FIELD_DESC);
      oprot.writeString(this.str2);
      oprot.writeFieldEnd();
    }
    if (this.str3 != null) {
      oprot.writeFieldBegin(STR3_FIELD_DESC);
      oprot.writeString(this.str3);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(NUMBER_FIELD_DESC);
    oprot.writeI32(this.number);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LONG_NUMBER_FIELD_DESC);
    oprot.writeI64(this.longNumber);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TestEntity(");
    boolean first = true;

    sb.append("str1:");
    if (this.str1 == null) {
      sb.append("null");
    } else {
      sb.append(this.str1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str2:");
    if (this.str2 == null) {
      sb.append("null");
    } else {
      sb.append(this.str2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("str3:");
    if (this.str3 == null) {
      sb.append("null");
    } else {
      sb.append(this.str3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number:");
    sb.append(this.number);
    first = false;
    if (!first) sb.append(", ");
    sb.append("longNumber:");
    sb.append(this.longNumber);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

